/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "bluetooth_autodefs.h"
#include "s3eEdk.h"
#include "bluetooth.h"
//Declarations of Init and Term functions
extern s3eResult bluetoothInit();
extern void bluetoothTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static bool init_bluetooth_wrap()
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: init_bluetooth"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)init_bluetooth, 0);
}

static void enable_bluetooth_wrap()
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: enable_bluetooth"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)enable_bluetooth, 0);
}

static void disable_bluetooth_wrap()
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: disable_bluetooth"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)disable_bluetooth, 0);
}

static bool is_bluetooth_enabled_wrap()
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: is_bluetooth_enabled"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)is_bluetooth_enabled, 0);
}

static void bluetooth_close_wrap()
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: bluetooth_close"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)bluetooth_close, 0);
}

static void bluetooth_enable_discoverability_wrap()
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: bluetooth_enable_discoverability"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)bluetooth_enable_discoverability, 0);
}

static bool bluetooth_is_discovering_wrap()
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: bluetooth_is_discovering"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)bluetooth_is_discovering, 0);
}

static void bluetooth_setup_client_wrap()
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: bluetooth_setup_client"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)bluetooth_setup_client, 0);
}

static bool is_bluetooth_connected_wrap()
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: is_bluetooth_connected"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)is_bluetooth_connected, 0);
}

static void bluetooth_message_start_wrap()
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: bluetooth_message_start"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)bluetooth_message_start, 0);
}

static void bluetooth_message_write_float_wrap(const char* str_value)
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: bluetooth_message_write_float"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)bluetooth_message_write_float, 1, str_value);
}

static void bluetooth_message_write_int_wrap(int value)
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: bluetooth_message_write_int"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)bluetooth_message_write_int, 1, value);
}

static void bluetooth_message_send_current_wrap()
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: bluetooth_message_send_current"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)bluetooth_message_send_current, 0);
}

static bool is_bluetooth_message_wrap()
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: is_bluetooth_message"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)is_bluetooth_message, 0);
}

static void bluetooth_message_discard_current_wrap()
{
    IwTrace(BLUETOOTH_VERBOSE, ("calling bluetooth func on main thread: bluetooth_message_discard_current"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)bluetooth_message_discard_current, 0);
}

#define init_bluetooth init_bluetooth_wrap
#define enable_bluetooth enable_bluetooth_wrap
#define disable_bluetooth disable_bluetooth_wrap
#define is_bluetooth_enabled is_bluetooth_enabled_wrap
#define bluetooth_close bluetooth_close_wrap
#define bluetooth_enable_discoverability bluetooth_enable_discoverability_wrap
#define bluetooth_is_discovering bluetooth_is_discovering_wrap
#define bluetooth_setup_client bluetooth_setup_client_wrap
#define is_bluetooth_connected is_bluetooth_connected_wrap
#define bluetooth_message_start bluetooth_message_start_wrap
#define bluetooth_message_write_float bluetooth_message_write_float_wrap
#define bluetooth_message_write_int bluetooth_message_write_int_wrap
#define bluetooth_message_send_current bluetooth_message_send_current_wrap
#define is_bluetooth_message is_bluetooth_message_wrap
#define bluetooth_message_discard_current bluetooth_message_discard_current_wrap

#endif

void bluetoothRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[18];
    funcPtrs[0] = (void*)init_bluetooth;
    funcPtrs[1] = (void*)enable_bluetooth;
    funcPtrs[2] = (void*)disable_bluetooth;
    funcPtrs[3] = (void*)is_bluetooth_enabled;
    funcPtrs[4] = (void*)bluetooth_close;
    funcPtrs[5] = (void*)bluetooth_enable_discoverability;
    funcPtrs[6] = (void*)bluetooth_is_discovering;
    funcPtrs[7] = (void*)bluetooth_setup_client;
    funcPtrs[8] = (void*)is_bluetooth_connected;
    funcPtrs[9] = (void*)bluetooth_message_start;
    funcPtrs[10] = (void*)bluetooth_message_write_float;
    funcPtrs[11] = (void*)bluetooth_message_write_int;
    funcPtrs[12] = (void*)bluetooth_message_send_current;
    funcPtrs[13] = (void*)is_bluetooth_message;
    funcPtrs[14] = (void*)bluetooth_message_read_int;
    funcPtrs[15] = (void*)bluetooth_message_read_float;
    funcPtrs[16] = (void*)bluetooth_message_discard_current;
    funcPtrs[17] = (void*)bluetooth_show_wrong_version_dialog;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[18] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("bluetooth", funcPtrs, sizeof(funcPtrs), flags, bluetoothInit, bluetoothTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int bluetoothStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&bluetoothRegisterExt;
    return 0;
}

int g_bluetoothVal = bluetoothStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    bluetoothRegisterExt();
}
#endif

#endif
